@use 'variables' as *;
@use 'mixins' as *;
@use 'sass:map';

$button-sizes: (
  'xl': 3.5rem,
  'l': 3rem,
  'm': 2.5rem,
  's': 2rem,
  'xs': 1.5rem
);

:host {
  display: inline-block;
  max-width: 100%;
  vertical-align: middle;
  @include cat-select(none);
}

:host([hidden]) {
  display: none;
}

.cat-button {
  position: relative;
  font: inherit;
  display: flex;
  align-items: center;
  justify-content: center;
  border: none;
  border-radius: cat-border-radius('m');
  text-decoration: none;
  width: 100%;
  box-sizing: border-box;
  cursor: pointer;
  transition:
    color cat-token('time.transition.s') linear,
    border-color cat-token('time.transition.s') linear,
    background-color cat-token('time.transition.s') linear,
    box-shadow cat-token('time.transition.s') linear;

  &:focus-visible {
    outline: 2px solid cat-token('color.ui.border.focus');
    outline-offset: 1px;
  }
}

// ----- content

.cat-button-content {
  display: flex;
  flex-direction: column;
  min-width: 0;
}

.cat-button-content-inner {
  @include cat-break-word;

  .cat-button-ellipsed & {
    @include cat-ellipsis;
  }
}

// ----- disabled

.cat-button-disabled {
  cursor: not-allowed;
}

// ----- round

.cat-button-round {
  border-radius: 10rem;
}

// ----- loading

.cat-button-loading {
  cursor: default;

  cat-spinner {
    position: absolute;
  }

  > *:not(cat-spinner) {
    visibility: hidden;
  }
}

// ----- group button

.cat-group-button {
  &-first {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  &-middle {
    border-radius: 0;
  }

  &-last {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  &:hover {
    z-index: 1;
  }

  &:focus-visible {
    z-index: 2;
  }
}

// ----- theme

.cat-button-filled {
  background-color: cat-token-wrap(var(--bg));
  color: cat-token-wrap(var(--fill));
  font-weight: var(--cat-font-weight-button, 600);
  @include cat-font-smooth;

  &.cat-button-disabled {
    --bg: #{cat-token('color.ui.background.muted', $wrap: false)};
    --fill: #{cat-token('color.ui.font.muted', $wrap: false)};
  }
}

.cat-button-outlined {
  background-color: cat-token('color.ui.background.surface');
  box-shadow: inset 0 0 0 1px cat-token-wrap(var(--base), $alpha: 0.2);
  color: cat-token-wrap(var(--text));

  &.cat-button-disabled {
    --base: #{cat-token('color.ui.font.muted', $wrap: false)};
    --text: #{cat-token('color.ui.font.muted', $wrap: false)};
  }

  &:hover:not(.cat-button-disabled):not(.cat-button-loading) {
    background-color: cat-token-wrap(var(--base), $alpha: 0.1);
  }

  &.cat-button-active:not(.cat-button-disabled):not(.cat-button-loading) {
    background-color: cat-token-wrap(var(--base), $alpha: 0.1);
  }

  &:active:not(.cat-button-disabled):not(.cat-button-loading) {
    background-color: cat-token-wrap(var(--base), $alpha: 0.1);
  }
}

.cat-button-text {
  background-color: transparent;
  color: cat-token-wrap(var(--text));
  text-decoration: cat-token('font.decoration.linkButton');

  &.cat-button-disabled {
    --text: #{cat-token('color.ui.font.muted', $wrap: false)};
  }

  &:hover:not(.cat-button-disabled):not(.cat-button-loading) {
    background-color: rgba(var(--base), 0.1);
  }

  &.cat-button-active:not(.cat-button-disabled):not(.cat-button-loading) {
    background-color: rgba(var(--base), 0.1);
  }
}

.cat-button-link {
  background-color: transparent;
  color: cat-token-wrap(var(--text));

  &.cat-button-disabled {
    --text: #{cat-token('color.ui.font.muted', $wrap: false)};
  }

  &:hover:not(.cat-button-disabled):not(.cat-button-loading) {
    text-decoration: cat-token('font.decoration.linkHover');
  }

  &.cat-button-active:not(.cat-button-disabled):not(.cat-button-loading) {
    text-decoration: cat-token('font.decoration.linkHover');
  }
}

@mixin theme($theme) {
  .cat-button-#{$theme} {
    --bg: #{cat-token('color.theme.#{$theme}.bg', $wrap: false)};
    --fill: #{cat-token('color.theme.#{$theme}.fill', $wrap: false)};
    --text: #{cat-token('color.theme.#{$theme}.text', $wrap: false)};
    @if $theme == 'secondary' {
      --base: #{cat-token('color.theme.#{$theme}.bg', $wrap: false)};
    } @else {
      --base: #{cat-token('color.theme.#{$theme}.text', $wrap: false)};
    }

    &:hover:not(.cat-button-disabled):not(.cat-button-loading) {
      --bg: #{cat-token('color.theme.#{$theme}.bgHover', $wrap: false)};
      --fill: #{cat-token('color.theme.#{$theme}.fillHover', $wrap: false)};
      --text: #{cat-token('color.theme.#{$theme}.textHover', $wrap: false)};
    }

    &.cat-button-active:not(.cat-button-disabled):not(.cat-button-loading),
    &:active:not(.cat-button-disabled):not(.cat-button-loading) {
      --bg: #{cat-token('color.theme.#{$theme}.bgActive', $wrap: false)};
      --fill: #{cat-token('color.theme.#{$theme}.fillActive', $wrap: false)};
      --text: #{cat-token('color.theme.#{$theme}.textActive', $wrap: false)};
    }
  }
}

@include theme('primary');
@include theme('secondary');
@include theme('success');
@include theme('warning');
@include theme('danger');

// ----- size

@mixin size($size, $fontSize, $padding) {
  $-line-height: cat-body-line-height($fontSize);

  $-total-height: map.get($button-sizes, $size);
  $-padding-v: ($-total-height - $-line-height) * 0.5;
  $-padding-h: $padding;

  .cat-button-#{$size} {
    min-width: map.get($button-sizes, $size);
    padding: $-padding-v $-padding-h;
    @include cat-body($fontSize, null);
    gap: 0.25rem;

    // normalize icon size for line height
    @if $fontSize == 'm' {
      cat-icon {
        margin-top: -0.125rem;
        margin-bottom: -0.125rem;
      }
    }

    &.cat-button-icon {
      width: $-total-height;
      padding-left: 0;
      padding-right: 0;
    }
  }

  :host(.cat-button-pull[size='#{$size}']) {
    margin: $-padding-v * -1 $-padding-h * -1;
  }

  :host(.cat-button-pull-h[size='#{$size}']) {
    margin-left: $-padding-h * -1;
    margin-right: $-padding-h * -1;
  }

  :host(.cat-button-pull-v[size='#{$size}']) {
    margin-top: $-padding-v * -1;
    margin-bottom: $-padding-v * -1;
  }

  :host(.cat-button-pull-t[size='#{$size}']) {
    margin-top: $-padding-v * -1;
  }

  :host(.cat-button-pull-l[size='#{$size}']) {
    margin-left: $-padding-h * -1;
  }

  :host(.cat-button-pull-b[size='#{$size}']) {
    margin-bottom: $-padding-v * -1;
  }

  :host(.cat-button-pull-r[size='#{$size}']) {
    margin-right: $-padding-h * -1;
  }
}

:host(.cat-button-pull:not([size])) {
  margin: -0.625rem -0.75rem;
}

:host(.cat-button-pull-h:not([size])) {
  margin-left: -0.75rem;
  margin-right: -0.75rem;
}

:host(.cat-button-pull-v:not([size])) {
  margin-top: -0.625rem;
  margin-bottom: -0.625rem;
}

:host(.cat-button-pull-t:not([size])) {
  margin-top: -0.625rem;
}

:host(.cat-button-pull-l:not([size])) {
  margin-left: -0.75rem;
}

:host(.cat-button-pull-b:not([size])) {
  margin-bottom: -0.625rem;
}

:host(.cat-button-pull-r:not([size])) {
  margin-right: -0.75rem;
}

@include size('xs', 's', 0.25rem);
@include size('s', 'm', 0.5rem);
@include size('m', 'm', 0.75rem);
@include size('l', 'm', 1rem);
@include size('xl', 'l', 1.25rem);

// ----- tabs

:host(.cat-tab) {
  &::part(button) {
    padding: 1.125rem 0.75rem;
    --cat-primary-text: transparent;
    --cat-secondary-bg: transparent;
  }

  &::part(content) {
    &::before {
      content: attr(data-text);
      content: attr(data-text) / '';
      height: 0;
      visibility: hidden;
      overflow: hidden;
      user-select: none;
      pointer-events: none;
      font-weight: 700;
    }
  }
}

// ----- alignment

:host(.cat-text-left) .cat-button {
  justify-content: left;
}

:host(.cat-text-right) .cat-button {
  justify-content: right;
}

// ----- navigation

:host(.cat-nav-item) {
  width: 100%;

  .cat-button {
    box-shadow: none;
    justify-content: left;
    gap: 0.5rem;

    &:focus-visible {
      outline-offset: -2px;
    }
  }
}
