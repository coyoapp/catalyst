/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Breakpoint } from "./utils/breakpoints";
import { Placement } from "@floating-ui/dom";
import { InputType } from "./components/cat-input/input-type";
import { CatSelectConnector, CatSelectMultipleTaggingValue, CatSelectTaggingValue, Item } from "./components/cat-select/cat-select";
import { Observable } from "rxjs";
export namespace Components {
    interface CatAlert {
        /**
          * The color palette of the alert.
         */
        "color": 'primary' | 'secondary' | 'danger' | 'success' | 'warning';
        /**
          * The name of an icon to be displayed in the alert.
         */
        "icon"?: string;
        /**
          * Whether the icon of the alert is deactivated.
         */
        "noIcon": boolean;
    }
    interface CatAvatar {
        /**
          * An icon to be used instead of the initials.
         */
        "icon"?: string;
        /**
          * Custom initials for the avatar.
         */
        "initials"?: string;
        /**
          * The label of the avatar.
         */
        "label": string;
        /**
          * Use round avatar edges.
         */
        "round": boolean;
        /**
          * The size of the avatar.
         */
        "size": 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * An optional avatar image.
         */
        "src"?: string;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * Specifies where to open the linked document.
         */
        "urlTarget"?: '_blank' | '_self';
    }
    interface CatBadge {
        /**
          * The color palette of the badge.
         */
        "color": 'primary' | 'secondary' | 'danger' | 'success' | 'warning';
        /**
          * Draw attention to the badge with a subtle animation.
         */
        "pulse": boolean;
        /**
          * Use round badge edges.
         */
        "round": boolean;
        /**
          * The size of the badge.
         */
        "size": 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * The rendering style of the badge.
         */
        "variant": 'filled' | 'outlined';
    }
    interface CatButton {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "a11yLabel"?: string;
        /**
          * Set the button into an active state.
         */
        "active": boolean;
        /**
          * Adds a unique identifier for the button. Please note that with this particular component this ID is added inside the web component. If you need an ID on the HTML element, use the regular `id` attribute instead.
         */
        "buttonId"?: string;
        /**
          * The color palette of the button.
         */
        "color": 'primary' | 'secondary' | 'danger' | 'success' | 'warning';
        /**
          * Specifies that the button should be disabled. A disabled button is unusable and un-clickable. Corresponds with the native HTML disabled attribute.
         */
        "disabled": boolean;
        /**
          * The name of an icon to be displayed in the button.
         */
        "icon"?: string;
        /**
          * Hide the actual button content and only display the icon.
         */
        "iconOnly": boolean | Breakpoint;
        /**
          * Display the icon on the right.
         */
        "iconRight": boolean;
        /**
          * Displays the button in a loading state with a spinner. Just like a disabled button, an inactive button is unusable and un-clickable. However, it retains the current focus state.
         */
        "loading": boolean;
        /**
          * The name of the button, which gets paired with the button's value when submitted as part of a form. Corresponds with the native HTML name attribute.
         */
        "name"?: string;
        /**
          * Disables ellipse overflowing button content.
         */
        "noEllipsis": boolean;
        /**
          * Use round button edges.
         */
        "round": boolean;
        /**
          * Sets focus on the button. Use this method instead of `button.focus()`.
          * @param options An optional object providing options to control aspects of the focusing process.
         */
        "setFocus": (options?: FocusOptions | undefined) => Promise<void>;
        /**
          * The size of the button.
         */
        "size": 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * Allows the button to submit a form.
         */
        "submit": boolean;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * Specifies where to open the linked document.
         */
        "urlTarget"?: '_blank' | '_self';
        /**
          * The value of the button, which gets paired with the button's name when submitted as part of a form. Corresponds with the native HTML value attribute.
         */
        "value"?: string;
        /**
          * The rendering style of the button.
         */
        "variant": 'filled' | 'outlined' | 'text';
    }
    interface CatCard {
    }
    interface CatCheckbox {
        /**
          * Checked state of the checkbox
         */
        "checked": boolean;
        /**
          * Disabled state of the checkbox
         */
        "disabled": boolean;
        /**
          * Optional hint text(s) to be displayed with the checkbox.
         */
        "hint"?: string | string[];
        /**
          * Indeterminate state of the checkbox
         */
        "indeterminate": boolean;
        /**
          * Label of the checkbox which is presented in the UI
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * Whether the label should appear to the left of the checkbox.
         */
        "labelLeft": boolean;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Required state of the checkbox
         */
        "required": boolean;
        /**
          * Sets focus on the checkbox. Use this method instead of `checkbox.focus()`.
          * @param options An optional object providing options to control aspects of the focusing process.
         */
        "setFocus": (options?: FocusOptions | undefined) => Promise<void>;
        /**
          * The value of the checkbox
         */
        "value"?: string | boolean;
    }
    interface CatDropdown {
        /**
          * Closes the dropdown.
         */
        "close": () => Promise<void>;
        /**
          * Do not close the dropdown on outside clicks.
         */
        "noAutoClose": boolean;
        /**
          * Allow overflow when dropdown is open.
         */
        "overflow": boolean;
        /**
          * The placement of the dropdown.
         */
        "placement": Placement;
    }
    interface CatIcon {
        /**
          * Adds accessible label for the icon that is only shown for screen readers. The `aria-hidden` attribute will be set if no label is present.
         */
        "a11yLabel"?: string;
        /**
          * The name of the icon.
         */
        "icon": string;
        /**
          * The size of the icon.
         */
        "size": 'xs' | 's' | 'm' | 'l' | 'xl' | 'inline';
    }
    interface CatInput {
        /**
          * Hint for form autofill feature.
         */
        "autoComplete"?: string;
        /**
          * Clear the input.
         */
        "clear": () => Promise<void>;
        /**
          * Whether the input should show a clear button.
         */
        "clearable": boolean;
        /**
          * Whether the input is disabled.
         */
        "disabled": boolean;
        /**
          * Optional hint text(s) to be displayed with the input.
         */
        "hint"?: string | string[];
        /**
          * The name of an icon to be displayed in the input.
         */
        "icon"?: string;
        /**
          * Display the icon on the right.
         */
        "iconRight": boolean;
        /**
          * The label for the input.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * A maximum value for date, time and numeric values.
         */
        "max"?: number | string;
        /**
          * A maximum length (number of characters) for textual values.
         */
        "maxLength"?: number;
        /**
          * A minimum value for date, time and numeric values.
         */
        "min"?: number | string;
        /**
          * A minimum length (number of characters) for textual values.
         */
        "minLength"?: number;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * The placeholder text to display within the input.
         */
        "placeholder"?: string;
        /**
          * The value is not editable.
         */
        "readonly": boolean;
        /**
          * A value is required or must be check for the form to be submittable.
         */
        "required": boolean;
        /**
          * Use round input edges.
         */
        "round": boolean;
        /**
          * Sets focus on the input. Use this method instead of `input.focus()`.
          * @param options An optional object providing options to control aspects of the focusing process.
         */
        "setFocus": (options?: FocusOptions | undefined) => Promise<void>;
        /**
          * A textual prefix to be displayed in the input.
         */
        "textPrefix"?: string;
        /**
          * A textual suffix to be displayed in the input.
         */
        "textSuffix"?: string;
        /**
          * Type of form control.
         */
        "type": InputType;
        /**
          * The value of the control.
         */
        "value"?: string | number;
    }
    interface CatModal {
        /**
          * Shows the modal.
         */
        "show": () => Promise<void>;
        /**
          * The size of the modal.
         */
        "size": 's' | 'm' | 'l';
    }
    interface CatPagination {
        /**
          * The number of pages to be shown around the current page.
         */
        "activePadding": number;
        /**
          * Use compact pagination mode.
         */
        "compact": boolean;
        /**
          * The icon of the "next" button.
         */
        "iconNext": string;
        /**
          * The icon of the "previous" button.
         */
        "iconPrev": string;
        /**
          * The current page.
         */
        "page": number;
        /**
          * The total number of pages.
         */
        "pageCount": number;
        /**
          * Use round button edges.
         */
        "round": boolean;
        /**
          * The number of pages to be shown at the edges.
         */
        "sidePadding": number;
        /**
          * The size of the buttons.
         */
        "size": 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * The rendering style of the buttons.
         */
        "variant": 'filled' | 'outlined' | 'text';
    }
    interface CatRadio {
        /**
          * Whether this radio is checked.
         */
        "checked": boolean;
        /**
          * Whether this radio is disabled.
         */
        "disabled": boolean;
        /**
          * Optional hint text(s) to be displayed with the radio.
         */
        "hint"?: string | string[];
        /**
          * The label of the radio that is visible.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * Whether the label should appear to the left of the radio component.
         */
        "labelLeft": boolean;
        /**
          * The name of the radio component.
         */
        "name"?: string;
        /**
          * Whether the radio is required.
         */
        "required": boolean;
        /**
          * Sets focus on the radio. Use this method instead of `radio.focus()`.
          * @param options An optional object providing options to control aspects of the focusing process.
         */
        "setFocus": (options?: FocusOptions | undefined) => Promise<void>;
        /**
          * The value of the radio component.
         */
        "value"?: string;
    }
    interface CatRadioGroup {
        /**
          * Adds an accessible label for the radio group that it is only shown in assistive technologies, like screen readers.
         */
        "a11yLabel"?: string;
        /**
          * Whether this radio group is disabled.
         */
        "disabled": boolean;
        /**
          * Whether the label of the radios should appear to the left of them.
         */
        "labelLeft": boolean;
        /**
          * The name of the radio group component.
         */
        "name"?: string;
        /**
          * The value of the radio group.
         */
        "value"?: string;
    }
    interface CatScrollable {
        /**
          * Flags to disable/enable overflowX.
         */
        "noOverflowX": boolean;
        /**
          * Flags to disable/enable overflowY.
         */
        "noOverflowY": boolean;
        /**
          * Flag to disable/enable overscroll behavior.
         */
        "noOverscroll": boolean;
        /**
          * Flag to not fire an initial event after content initialization.
         */
        "noScrolledInit": boolean;
        /**
          * Flags to disable/enable scroll shadowX.
         */
        "noShadowX": boolean;
        /**
          * Flags to disable/enable scroll shadowY.
         */
        "noShadowY": boolean;
        /**
          * Buffer to be used to calculate the scroll distance.
         */
        "scrolledBuffer": number;
    }
    interface CatSelect {
        /**
          * Whether the select should show a clear button.
         */
        "clearable": boolean;
        /**
          * Connect the functions of the select
          * @param connector - The {@link CatSelectConnector} of the select.
         */
        "connect": (connector: CatSelectConnector) => Promise<void>;
        /**
          * The debounce time for the search.
         */
        "debounce": number;
        /**
          * Whether the select is disabled.
         */
        "disabled": boolean;
        /**
          * Optional hint text(s) to be displayed with the select.
         */
        "hint"?: string | string[];
        /**
          * The label for the select.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * Enable multiple selection.
         */
        "multiple": boolean;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * The placeholder text to display within the select.
         */
        "placeholder"?: string;
        /**
          * The placement of the select.
         */
        "placement": Placement;
        /**
          * A value is required or must be checked for the form to be submittable.
         */
        "required": boolean;
        /**
          * Optional hint text to be displayed on the new item to be added.
         */
        "tagHint"?: string;
        /**
          * Whether the select should add new items.
         */
        "tags": boolean;
        /**
          * The value of the select.  The value of the select depends on whether it is allowed to choose a single item or several items. When only one item can be selected, the value is the id of the item, in case several items can be selected, the value is an array of ids of the selected items.  In case the user can add new items to the select (tags activated), the value in the single select is an object (CatSelectTaggingValue) with the id of the item or the name of the created item, in the case of multiple select, it is an object (CatSelectMultipleTaggingValue) with the array of the ids of the items selected and the array of the names of the items created
         */
        "value"?: string | string[] | CatSelectTaggingValue | CatSelectMultipleTaggingValue;
    }
    interface CatSelectDemo {
    }
    interface CatSkeleton {
        /**
          * The animation style of the skeleton.
         */
        "effect": 'plain' | 'sheen' | 'pulse';
        /**
          * The number of text lines to be rendered for "head" and "body" variants. Defaults to 1 for "head" and 3 for "body". Will be ignored for other variants.
         */
        "lines"?: number;
        /**
          * The size of the skeleton. If the variant is set to "head", the size values "xs" to "xl" translate to the head levels `h1` to `h5`.
         */
        "size": 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * The rendering style of the skeleton.
         */
        "variant": 'rectangle' | 'square' | 'circle' | 'head' | 'body';
    }
    interface CatSpinner {
        /**
          * Adds accessible label for the spinner that is only shown for screen readers. The `aria-hidden` attribute will be set if no label is present.
         */
        "a11yLabel"?: string;
        /**
          * The size of the spinner.
         */
        "size": 'xs' | 's' | 'm' | 'l' | 'xl' | 'inline';
    }
    interface CatTab {
        /**
          * Specifies that the tab should be deactivated.
         */
        "deactivated": boolean;
        /**
          * The name of an icon to be displayed in the tab.
         */
        "icon"?: string;
        /**
          * Hide the actual button content and only display the tab.
         */
        "iconOnly": boolean | Breakpoint;
        /**
          * Display the icon on the right.
         */
        "iconRight": boolean;
        /**
          * The label of the tab.
         */
        "label": string;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * Specifies where to open the linked document.
         */
        "urlTarget"?: '_blank' | '_self';
    }
    interface CatTabs {
        /**
          * The ID of the active tab.
         */
        "activeTab": string;
        /**
          * The alignment of the tabs.
         */
        "tabsAlign": 'left' | 'center' | 'right' | 'justify';
    }
    interface CatTextarea {
        /**
          * Whether the textarea is disabled.
         */
        "disabled": boolean;
        /**
          * Optional hint text(s) to be displayed with the textarea.
         */
        "hint"?: string | string[];
        /**
          * The label for the textarea.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * A maximum length (number of characters) for textual values.
         */
        "maxLength"?: number;
        /**
          * A minimum length (number of characters) for textual values.
         */
        "minLength"?: number;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name": string;
        /**
          * The placeholder text to display within the input.
         */
        "placeholder"?: string;
        /**
          * The value is not editable.
         */
        "readonly": boolean;
        /**
          * A value is required or must be check for the form to be submittable.
         */
        "required": boolean;
        /**
          * Specifies the initial number of lines in the textarea.
         */
        "rows": number;
        /**
          * Sets focus on the textarea. Use this method instead of `textarea.focus()`.
          * @param options An optional object providing options to control aspects of the focusing process.
         */
        "setFocus": (options?: FocusOptions | undefined) => Promise<void>;
        /**
          * The initial value of the control.
         */
        "value"?: string | number;
    }
    interface CatToastDemo {
    }
    interface CatToggle {
        /**
          * Checked state of the toggle.
         */
        "checked": boolean;
        /**
          * Disabled state of the toggle.
         */
        "disabled": boolean;
        /**
          * Optional hint text(s) to be displayed with the toggle.
         */
        "hint"?: string | string[];
        /**
          * The label of the toggle that is visible.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * Whether the label should appear to the left of the toggle.
         */
        "labelLeft": boolean;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Required state of the toggle.
         */
        "required": boolean;
        /**
          * Sets focus on the toggle. Use this method instead of `toggle.focus()`.
          * @param options An optional object providing options to control aspects of the focusing process.
         */
        "setFocus": (options?: FocusOptions | undefined) => Promise<void>;
        /**
          * The value of the toggle
         */
        "value"?: string | boolean;
    }
    interface CatTooltip {
        /**
          * The content of the tooltip.
         */
        "content": string;
        /**
          * Specifies that the tooltip should be disabled. A disabled tooltip is unusable, and invisible. Corresponds with the native HTML disabled attribute.
         */
        "disabled": boolean;
        /**
          * The delay time for hiding tooltip in ms.
         */
        "hideDelay": number;
        /**
          * The duration of tap to show the tooltip.
         */
        "longTouchDuration": number;
        /**
          * The placement of the tooltip.
         */
        "placement": Placement;
        /**
          * Use round tooltip edges.
         */
        "round": boolean;
        /**
          * The delay time for showing tooltip in ms.
         */
        "showDelay": number;
        /**
          * The size of the tooltip.
         */
        "size": 's' | 'm' | 'l';
    }
}
export interface CatButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatButtonElement;
}
export interface CatCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatCheckboxElement;
}
export interface CatDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatDropdownElement;
}
export interface CatInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatInputElement;
}
export interface CatRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatRadioElement;
}
export interface CatRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatRadioGroupElement;
}
export interface CatScrollableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatScrollableElement;
}
export interface CatSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatSelectElement;
}
export interface CatTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatTabElement;
}
export interface CatTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatTextareaElement;
}
export interface CatToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatToggleElement;
}
declare global {
    interface HTMLCatAlertElement extends Components.CatAlert, HTMLStencilElement {
    }
    var HTMLCatAlertElement: {
        prototype: HTMLCatAlertElement;
        new (): HTMLCatAlertElement;
    };
    interface HTMLCatAvatarElement extends Components.CatAvatar, HTMLStencilElement {
    }
    var HTMLCatAvatarElement: {
        prototype: HTMLCatAvatarElement;
        new (): HTMLCatAvatarElement;
    };
    interface HTMLCatBadgeElement extends Components.CatBadge, HTMLStencilElement {
    }
    var HTMLCatBadgeElement: {
        prototype: HTMLCatBadgeElement;
        new (): HTMLCatBadgeElement;
    };
    interface HTMLCatButtonElement extends Components.CatButton, HTMLStencilElement {
    }
    var HTMLCatButtonElement: {
        prototype: HTMLCatButtonElement;
        new (): HTMLCatButtonElement;
    };
    interface HTMLCatCardElement extends Components.CatCard, HTMLStencilElement {
    }
    var HTMLCatCardElement: {
        prototype: HTMLCatCardElement;
        new (): HTMLCatCardElement;
    };
    interface HTMLCatCheckboxElement extends Components.CatCheckbox, HTMLStencilElement {
    }
    var HTMLCatCheckboxElement: {
        prototype: HTMLCatCheckboxElement;
        new (): HTMLCatCheckboxElement;
    };
    interface HTMLCatDropdownElement extends Components.CatDropdown, HTMLStencilElement {
    }
    var HTMLCatDropdownElement: {
        prototype: HTMLCatDropdownElement;
        new (): HTMLCatDropdownElement;
    };
    interface HTMLCatIconElement extends Components.CatIcon, HTMLStencilElement {
    }
    var HTMLCatIconElement: {
        prototype: HTMLCatIconElement;
        new (): HTMLCatIconElement;
    };
    interface HTMLCatInputElement extends Components.CatInput, HTMLStencilElement {
    }
    var HTMLCatInputElement: {
        prototype: HTMLCatInputElement;
        new (): HTMLCatInputElement;
    };
    interface HTMLCatModalElement extends Components.CatModal, HTMLStencilElement {
    }
    var HTMLCatModalElement: {
        prototype: HTMLCatModalElement;
        new (): HTMLCatModalElement;
    };
    interface HTMLCatPaginationElement extends Components.CatPagination, HTMLStencilElement {
    }
    var HTMLCatPaginationElement: {
        prototype: HTMLCatPaginationElement;
        new (): HTMLCatPaginationElement;
    };
    interface HTMLCatRadioElement extends Components.CatRadio, HTMLStencilElement {
    }
    var HTMLCatRadioElement: {
        prototype: HTMLCatRadioElement;
        new (): HTMLCatRadioElement;
    };
    interface HTMLCatRadioGroupElement extends Components.CatRadioGroup, HTMLStencilElement {
    }
    var HTMLCatRadioGroupElement: {
        prototype: HTMLCatRadioGroupElement;
        new (): HTMLCatRadioGroupElement;
    };
    interface HTMLCatScrollableElement extends Components.CatScrollable, HTMLStencilElement {
    }
    var HTMLCatScrollableElement: {
        prototype: HTMLCatScrollableElement;
        new (): HTMLCatScrollableElement;
    };
    interface HTMLCatSelectElement extends Components.CatSelect, HTMLStencilElement {
    }
    var HTMLCatSelectElement: {
        prototype: HTMLCatSelectElement;
        new (): HTMLCatSelectElement;
    };
    interface HTMLCatSelectDemoElement extends Components.CatSelectDemo, HTMLStencilElement {
    }
    var HTMLCatSelectDemoElement: {
        prototype: HTMLCatSelectDemoElement;
        new (): HTMLCatSelectDemoElement;
    };
    interface HTMLCatSkeletonElement extends Components.CatSkeleton, HTMLStencilElement {
    }
    var HTMLCatSkeletonElement: {
        prototype: HTMLCatSkeletonElement;
        new (): HTMLCatSkeletonElement;
    };
    interface HTMLCatSpinnerElement extends Components.CatSpinner, HTMLStencilElement {
    }
    var HTMLCatSpinnerElement: {
        prototype: HTMLCatSpinnerElement;
        new (): HTMLCatSpinnerElement;
    };
    interface HTMLCatTabElement extends Components.CatTab, HTMLStencilElement {
    }
    var HTMLCatTabElement: {
        prototype: HTMLCatTabElement;
        new (): HTMLCatTabElement;
    };
    interface HTMLCatTabsElement extends Components.CatTabs, HTMLStencilElement {
    }
    var HTMLCatTabsElement: {
        prototype: HTMLCatTabsElement;
        new (): HTMLCatTabsElement;
    };
    interface HTMLCatTextareaElement extends Components.CatTextarea, HTMLStencilElement {
    }
    var HTMLCatTextareaElement: {
        prototype: HTMLCatTextareaElement;
        new (): HTMLCatTextareaElement;
    };
    interface HTMLCatToastDemoElement extends Components.CatToastDemo, HTMLStencilElement {
    }
    var HTMLCatToastDemoElement: {
        prototype: HTMLCatToastDemoElement;
        new (): HTMLCatToastDemoElement;
    };
    interface HTMLCatToggleElement extends Components.CatToggle, HTMLStencilElement {
    }
    var HTMLCatToggleElement: {
        prototype: HTMLCatToggleElement;
        new (): HTMLCatToggleElement;
    };
    interface HTMLCatTooltipElement extends Components.CatTooltip, HTMLStencilElement {
    }
    var HTMLCatTooltipElement: {
        prototype: HTMLCatTooltipElement;
        new (): HTMLCatTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "cat-alert": HTMLCatAlertElement;
        "cat-avatar": HTMLCatAvatarElement;
        "cat-badge": HTMLCatBadgeElement;
        "cat-button": HTMLCatButtonElement;
        "cat-card": HTMLCatCardElement;
        "cat-checkbox": HTMLCatCheckboxElement;
        "cat-dropdown": HTMLCatDropdownElement;
        "cat-icon": HTMLCatIconElement;
        "cat-input": HTMLCatInputElement;
        "cat-modal": HTMLCatModalElement;
        "cat-pagination": HTMLCatPaginationElement;
        "cat-radio": HTMLCatRadioElement;
        "cat-radio-group": HTMLCatRadioGroupElement;
        "cat-scrollable": HTMLCatScrollableElement;
        "cat-select": HTMLCatSelectElement;
        "cat-select-demo": HTMLCatSelectDemoElement;
        "cat-skeleton": HTMLCatSkeletonElement;
        "cat-spinner": HTMLCatSpinnerElement;
        "cat-tab": HTMLCatTabElement;
        "cat-tabs": HTMLCatTabsElement;
        "cat-textarea": HTMLCatTextareaElement;
        "cat-toast-demo": HTMLCatToastDemoElement;
        "cat-toggle": HTMLCatToggleElement;
        "cat-tooltip": HTMLCatTooltipElement;
    }
}
declare namespace LocalJSX {
    interface CatAlert {
        /**
          * The color palette of the alert.
         */
        "color"?: 'primary' | 'secondary' | 'danger' | 'success' | 'warning';
        /**
          * The name of an icon to be displayed in the alert.
         */
        "icon"?: string;
        /**
          * Whether the icon of the alert is deactivated.
         */
        "noIcon"?: boolean;
    }
    interface CatAvatar {
        /**
          * An icon to be used instead of the initials.
         */
        "icon"?: string;
        /**
          * Custom initials for the avatar.
         */
        "initials"?: string;
        /**
          * The label of the avatar.
         */
        "label"?: string;
        /**
          * Use round avatar edges.
         */
        "round"?: boolean;
        /**
          * The size of the avatar.
         */
        "size"?: 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * An optional avatar image.
         */
        "src"?: string;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * Specifies where to open the linked document.
         */
        "urlTarget"?: '_blank' | '_self';
    }
    interface CatBadge {
        /**
          * The color palette of the badge.
         */
        "color"?: 'primary' | 'secondary' | 'danger' | 'success' | 'warning';
        /**
          * Draw attention to the badge with a subtle animation.
         */
        "pulse"?: boolean;
        /**
          * Use round badge edges.
         */
        "round"?: boolean;
        /**
          * The size of the badge.
         */
        "size"?: 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * The rendering style of the badge.
         */
        "variant"?: 'filled' | 'outlined';
    }
    interface CatButton {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "a11yLabel"?: string;
        /**
          * Set the button into an active state.
         */
        "active"?: boolean;
        /**
          * Adds a unique identifier for the button. Please note that with this particular component this ID is added inside the web component. If you need an ID on the HTML element, use the regular `id` attribute instead.
         */
        "buttonId"?: string;
        /**
          * The color palette of the button.
         */
        "color"?: 'primary' | 'secondary' | 'danger' | 'success' | 'warning';
        /**
          * Specifies that the button should be disabled. A disabled button is unusable and un-clickable. Corresponds with the native HTML disabled attribute.
         */
        "disabled"?: boolean;
        /**
          * The name of an icon to be displayed in the button.
         */
        "icon"?: string;
        /**
          * Hide the actual button content and only display the icon.
         */
        "iconOnly"?: boolean | Breakpoint;
        /**
          * Display the icon on the right.
         */
        "iconRight"?: boolean;
        /**
          * Displays the button in a loading state with a spinner. Just like a disabled button, an inactive button is unusable and un-clickable. However, it retains the current focus state.
         */
        "loading"?: boolean;
        /**
          * The name of the button, which gets paired with the button's value when submitted as part of a form. Corresponds with the native HTML name attribute.
         */
        "name"?: string;
        /**
          * Disables ellipse overflowing button content.
         */
        "noEllipsis"?: boolean;
        /**
          * Emitted when the button loses focus.
         */
        "onCatBlur"?: (event: CatButtonCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the button is clicked.
         */
        "onCatClick"?: (event: CatButtonCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the button received focus.
         */
        "onCatFocus"?: (event: CatButtonCustomEvent<FocusEvent>) => void;
        /**
          * Use round button edges.
         */
        "round"?: boolean;
        /**
          * The size of the button.
         */
        "size"?: 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * Allows the button to submit a form.
         */
        "submit"?: boolean;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * Specifies where to open the linked document.
         */
        "urlTarget"?: '_blank' | '_self';
        /**
          * The value of the button, which gets paired with the button's name when submitted as part of a form. Corresponds with the native HTML value attribute.
         */
        "value"?: string;
        /**
          * The rendering style of the button.
         */
        "variant"?: 'filled' | 'outlined' | 'text';
    }
    interface CatCard {
    }
    interface CatCheckbox {
        /**
          * Checked state of the checkbox
         */
        "checked"?: boolean;
        /**
          * Disabled state of the checkbox
         */
        "disabled"?: boolean;
        /**
          * Optional hint text(s) to be displayed with the checkbox.
         */
        "hint"?: string | string[];
        /**
          * Indeterminate state of the checkbox
         */
        "indeterminate"?: boolean;
        /**
          * Label of the checkbox which is presented in the UI
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Whether the label should appear to the left of the checkbox.
         */
        "labelLeft"?: boolean;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when the checkbox loses focus.
         */
        "onCatBlur"?: (event: CatCheckboxCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the checked status of the checkbox is changed.
         */
        "onCatChange"?: (event: CatCheckboxCustomEvent<any>) => void;
        /**
          * Emitted when the checkbox received focus.
         */
        "onCatFocus"?: (event: CatCheckboxCustomEvent<FocusEvent>) => void;
        /**
          * Required state of the checkbox
         */
        "required"?: boolean;
        /**
          * The value of the checkbox
         */
        "value"?: string | boolean;
    }
    interface CatDropdown {
        /**
          * Do not close the dropdown on outside clicks.
         */
        "noAutoClose"?: boolean;
        /**
          * Emitted when the dropdown is closed.
         */
        "onCatClose"?: (event: CatDropdownCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the dropdown is opened.
         */
        "onCatOpen"?: (event: CatDropdownCustomEvent<FocusEvent>) => void;
        /**
          * Allow overflow when dropdown is open.
         */
        "overflow"?: boolean;
        /**
          * The placement of the dropdown.
         */
        "placement"?: Placement;
    }
    interface CatIcon {
        /**
          * Adds accessible label for the icon that is only shown for screen readers. The `aria-hidden` attribute will be set if no label is present.
         */
        "a11yLabel"?: string;
        /**
          * The name of the icon.
         */
        "icon"?: string;
        /**
          * The size of the icon.
         */
        "size"?: 'xs' | 's' | 'm' | 'l' | 'xl' | 'inline';
    }
    interface CatInput {
        /**
          * Hint for form autofill feature.
         */
        "autoComplete"?: string;
        /**
          * Whether the input should show a clear button.
         */
        "clearable"?: boolean;
        /**
          * Whether the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Optional hint text(s) to be displayed with the input.
         */
        "hint"?: string | string[];
        /**
          * The name of an icon to be displayed in the input.
         */
        "icon"?: string;
        /**
          * Display the icon on the right.
         */
        "iconRight"?: boolean;
        /**
          * The label for the input.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * A maximum value for date, time and numeric values.
         */
        "max"?: number | string;
        /**
          * A maximum length (number of characters) for textual values.
         */
        "maxLength"?: number;
        /**
          * A minimum value for date, time and numeric values.
         */
        "min"?: number | string;
        /**
          * A minimum length (number of characters) for textual values.
         */
        "minLength"?: number;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onCatBlur"?: (event: CatInputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value is changed.
         */
        "onCatChange"?: (event: CatInputCustomEvent<any>) => void;
        /**
          * Emitted when the input received focus.
         */
        "onCatFocus"?: (event: CatInputCustomEvent<FocusEvent>) => void;
        /**
          * The placeholder text to display within the input.
         */
        "placeholder"?: string;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * A value is required or must be check for the form to be submittable.
         */
        "required"?: boolean;
        /**
          * Use round input edges.
         */
        "round"?: boolean;
        /**
          * A textual prefix to be displayed in the input.
         */
        "textPrefix"?: string;
        /**
          * A textual suffix to be displayed in the input.
         */
        "textSuffix"?: string;
        /**
          * Type of form control.
         */
        "type"?: InputType;
        /**
          * The value of the control.
         */
        "value"?: string | number;
    }
    interface CatModal {
        /**
          * The size of the modal.
         */
        "size"?: 's' | 'm' | 'l';
    }
    interface CatPagination {
        /**
          * The number of pages to be shown around the current page.
         */
        "activePadding"?: number;
        /**
          * Use compact pagination mode.
         */
        "compact"?: boolean;
        /**
          * The icon of the "next" button.
         */
        "iconNext"?: string;
        /**
          * The icon of the "previous" button.
         */
        "iconPrev"?: string;
        /**
          * The current page.
         */
        "page"?: number;
        /**
          * The total number of pages.
         */
        "pageCount"?: number;
        /**
          * Use round button edges.
         */
        "round"?: boolean;
        /**
          * The number of pages to be shown at the edges.
         */
        "sidePadding"?: number;
        /**
          * The size of the buttons.
         */
        "size"?: 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * The rendering style of the buttons.
         */
        "variant"?: 'filled' | 'outlined' | 'text';
    }
    interface CatRadio {
        /**
          * Whether this radio is checked.
         */
        "checked"?: boolean;
        /**
          * Whether this radio is disabled.
         */
        "disabled"?: boolean;
        /**
          * Optional hint text(s) to be displayed with the radio.
         */
        "hint"?: string | string[];
        /**
          * The label of the radio that is visible.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Whether the label should appear to the left of the radio component.
         */
        "labelLeft"?: boolean;
        /**
          * The name of the radio component.
         */
        "name"?: string;
        /**
          * Emitted when the radio loses focus.
         */
        "onCatBlur"?: (event: CatRadioCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the radio is changed.
         */
        "onCatChange"?: (event: CatRadioCustomEvent<any>) => void;
        /**
          * Emitted when the radio received focus.
         */
        "onCatFocus"?: (event: CatRadioCustomEvent<FocusEvent>) => void;
        /**
          * Whether the radio is required.
         */
        "required"?: boolean;
        /**
          * The value of the radio component.
         */
        "value"?: string;
    }
    interface CatRadioGroup {
        /**
          * Adds an accessible label for the radio group that it is only shown in assistive technologies, like screen readers.
         */
        "a11yLabel"?: string;
        /**
          * Whether this radio group is disabled.
         */
        "disabled"?: boolean;
        /**
          * Whether the label of the radios should appear to the left of them.
         */
        "labelLeft"?: boolean;
        /**
          * The name of the radio group component.
         */
        "name"?: string;
        /**
          * Emitted when the radio group loses focus.
         */
        "onCatBlur"?: (event: CatRadioGroupCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value is changed.
         */
        "onCatChange"?: (event: CatRadioGroupCustomEvent<any>) => void;
        /**
          * The value of the radio group.
         */
        "value"?: string;
    }
    interface CatScrollable {
        /**
          * Flags to disable/enable overflowX.
         */
        "noOverflowX"?: boolean;
        /**
          * Flags to disable/enable overflowY.
         */
        "noOverflowY"?: boolean;
        /**
          * Flag to disable/enable overscroll behavior.
         */
        "noOverscroll"?: boolean;
        /**
          * Flag to not fire an initial event after content initialization.
         */
        "noScrolledInit"?: boolean;
        /**
          * Flags to disable/enable scroll shadowX.
         */
        "noShadowX"?: boolean;
        /**
          * Flags to disable/enable scroll shadowY.
         */
        "noShadowY"?: boolean;
        /**
          * Emitted when the content is fully scrolled to the bottom.
         */
        "onScrolledBottom"?: (event: CatScrollableCustomEvent<void>) => void;
        /**
          * Emitted when the content is fully scrolled to the left.
         */
        "onScrolledLeft"?: (event: CatScrollableCustomEvent<void>) => void;
        /**
          * Emitted when the content is fully scrolled to the right.
         */
        "onScrolledRight"?: (event: CatScrollableCustomEvent<void>) => void;
        /**
          * Emitted when the content is fully scrolled to the top.
         */
        "onScrolledTop"?: (event: CatScrollableCustomEvent<void>) => void;
        /**
          * Buffer to be used to calculate the scroll distance.
         */
        "scrolledBuffer"?: number;
    }
    interface CatSelect {
        /**
          * Whether the select should show a clear button.
         */
        "clearable"?: boolean;
        /**
          * The debounce time for the search.
         */
        "debounce"?: number;
        /**
          * Whether the select is disabled.
         */
        "disabled"?: boolean;
        /**
          * Optional hint text(s) to be displayed with the select.
         */
        "hint"?: string | string[];
        /**
          * The label for the select.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Enable multiple selection.
         */
        "multiple"?: boolean;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Emitted when the select loses the focus.
         */
        "onCatBlur"?: (event: CatSelectCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value is changed.
         */
        "onCatChange"?: (event: CatSelectCustomEvent<any>) => void;
        /**
          * Emitted when the select dropdown is closed.
         */
        "onCatClose"?: (event: CatSelectCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the select dropdown is opened.
         */
        "onCatOpen"?: (event: CatSelectCustomEvent<FocusEvent>) => void;
        /**
          * The placeholder text to display within the select.
         */
        "placeholder"?: string;
        /**
          * The placement of the select.
         */
        "placement"?: Placement;
        /**
          * A value is required or must be checked for the form to be submittable.
         */
        "required"?: boolean;
        /**
          * Optional hint text to be displayed on the new item to be added.
         */
        "tagHint"?: string;
        /**
          * Whether the select should add new items.
         */
        "tags"?: boolean;
        /**
          * The value of the select.  The value of the select depends on whether it is allowed to choose a single item or several items. When only one item can be selected, the value is the id of the item, in case several items can be selected, the value is an array of ids of the selected items.  In case the user can add new items to the select (tags activated), the value in the single select is an object (CatSelectTaggingValue) with the id of the item or the name of the created item, in the case of multiple select, it is an object (CatSelectMultipleTaggingValue) with the array of the ids of the items selected and the array of the names of the items created
         */
        "value"?: string | string[] | CatSelectTaggingValue | CatSelectMultipleTaggingValue;
    }
    interface CatSelectDemo {
    }
    interface CatSkeleton {
        /**
          * The animation style of the skeleton.
         */
        "effect"?: 'plain' | 'sheen' | 'pulse';
        /**
          * The number of text lines to be rendered for "head" and "body" variants. Defaults to 1 for "head" and 3 for "body". Will be ignored for other variants.
         */
        "lines"?: number;
        /**
          * The size of the skeleton. If the variant is set to "head", the size values "xs" to "xl" translate to the head levels `h1` to `h5`.
         */
        "size"?: 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * The rendering style of the skeleton.
         */
        "variant"?: 'rectangle' | 'square' | 'circle' | 'head' | 'body';
    }
    interface CatSpinner {
        /**
          * Adds accessible label for the spinner that is only shown for screen readers. The `aria-hidden` attribute will be set if no label is present.
         */
        "a11yLabel"?: string;
        /**
          * The size of the spinner.
         */
        "size"?: 'xs' | 's' | 'm' | 'l' | 'xl' | 'inline';
    }
    interface CatTab {
        /**
          * Specifies that the tab should be deactivated.
         */
        "deactivated"?: boolean;
        /**
          * The name of an icon to be displayed in the tab.
         */
        "icon"?: string;
        /**
          * Hide the actual button content and only display the tab.
         */
        "iconOnly"?: boolean | Breakpoint;
        /**
          * Display the icon on the right.
         */
        "iconRight"?: boolean;
        /**
          * The label of the tab.
         */
        "label"?: string;
        /**
          * Emitted when tab is clicked.
         */
        "onTabClick"?: (event: CatTabCustomEvent<MouseEvent>) => void;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * Specifies where to open the linked document.
         */
        "urlTarget"?: '_blank' | '_self';
    }
    interface CatTabs {
        /**
          * The ID of the active tab.
         */
        "activeTab"?: string;
        /**
          * The alignment of the tabs.
         */
        "tabsAlign"?: 'left' | 'center' | 'right' | 'justify';
    }
    interface CatTextarea {
        /**
          * Whether the textarea is disabled.
         */
        "disabled"?: boolean;
        /**
          * Optional hint text(s) to be displayed with the textarea.
         */
        "hint"?: string | string[];
        /**
          * The label for the textarea.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * A maximum length (number of characters) for textual values.
         */
        "maxLength"?: number;
        /**
          * A minimum length (number of characters) for textual values.
         */
        "minLength"?: number;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Emitted when the textarea loses focus.
         */
        "onCatBlur"?: (event: CatTextareaCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value is changed.
         */
        "onCatChange"?: (event: CatTextareaCustomEvent<any>) => void;
        /**
          * Emitted when the textarea received focus.
         */
        "onCatFocus"?: (event: CatTextareaCustomEvent<FocusEvent>) => void;
        /**
          * The placeholder text to display within the input.
         */
        "placeholder"?: string;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * A value is required or must be check for the form to be submittable.
         */
        "required"?: boolean;
        /**
          * Specifies the initial number of lines in the textarea.
         */
        "rows"?: number;
        /**
          * The initial value of the control.
         */
        "value"?: string | number;
    }
    interface CatToastDemo {
    }
    interface CatToggle {
        /**
          * Checked state of the toggle.
         */
        "checked"?: boolean;
        /**
          * Disabled state of the toggle.
         */
        "disabled"?: boolean;
        /**
          * Optional hint text(s) to be displayed with the toggle.
         */
        "hint"?: string | string[];
        /**
          * The label of the toggle that is visible.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Whether the label should appear to the left of the toggle.
         */
        "labelLeft"?: boolean;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when the toggle loses focus.
         */
        "onCatBlur"?: (event: CatToggleCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the checked status of the toggle is changed.
         */
        "onCatChange"?: (event: CatToggleCustomEvent<any>) => void;
        /**
          * Emitted when the toggle received focus.
         */
        "onCatFocus"?: (event: CatToggleCustomEvent<FocusEvent>) => void;
        /**
          * Required state of the toggle.
         */
        "required"?: boolean;
        /**
          * The value of the toggle
         */
        "value"?: string | boolean;
    }
    interface CatTooltip {
        /**
          * The content of the tooltip.
         */
        "content"?: string;
        /**
          * Specifies that the tooltip should be disabled. A disabled tooltip is unusable, and invisible. Corresponds with the native HTML disabled attribute.
         */
        "disabled"?: boolean;
        /**
          * The delay time for hiding tooltip in ms.
         */
        "hideDelay"?: number;
        /**
          * The duration of tap to show the tooltip.
         */
        "longTouchDuration"?: number;
        /**
          * The placement of the tooltip.
         */
        "placement"?: Placement;
        /**
          * Use round tooltip edges.
         */
        "round"?: boolean;
        /**
          * The delay time for showing tooltip in ms.
         */
        "showDelay"?: number;
        /**
          * The size of the tooltip.
         */
        "size"?: 's' | 'm' | 'l';
    }
    interface IntrinsicElements {
        "cat-alert": CatAlert;
        "cat-avatar": CatAvatar;
        "cat-badge": CatBadge;
        "cat-button": CatButton;
        "cat-card": CatCard;
        "cat-checkbox": CatCheckbox;
        "cat-dropdown": CatDropdown;
        "cat-icon": CatIcon;
        "cat-input": CatInput;
        "cat-modal": CatModal;
        "cat-pagination": CatPagination;
        "cat-radio": CatRadio;
        "cat-radio-group": CatRadioGroup;
        "cat-scrollable": CatScrollable;
        "cat-select": CatSelect;
        "cat-select-demo": CatSelectDemo;
        "cat-skeleton": CatSkeleton;
        "cat-spinner": CatSpinner;
        "cat-tab": CatTab;
        "cat-tabs": CatTabs;
        "cat-textarea": CatTextarea;
        "cat-toast-demo": CatToastDemo;
        "cat-toggle": CatToggle;
        "cat-tooltip": CatTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cat-alert": LocalJSX.CatAlert & JSXBase.HTMLAttributes<HTMLCatAlertElement>;
            "cat-avatar": LocalJSX.CatAvatar & JSXBase.HTMLAttributes<HTMLCatAvatarElement>;
            "cat-badge": LocalJSX.CatBadge & JSXBase.HTMLAttributes<HTMLCatBadgeElement>;
            "cat-button": LocalJSX.CatButton & JSXBase.HTMLAttributes<HTMLCatButtonElement>;
            "cat-card": LocalJSX.CatCard & JSXBase.HTMLAttributes<HTMLCatCardElement>;
            "cat-checkbox": LocalJSX.CatCheckbox & JSXBase.HTMLAttributes<HTMLCatCheckboxElement>;
            "cat-dropdown": LocalJSX.CatDropdown & JSXBase.HTMLAttributes<HTMLCatDropdownElement>;
            "cat-icon": LocalJSX.CatIcon & JSXBase.HTMLAttributes<HTMLCatIconElement>;
            "cat-input": LocalJSX.CatInput & JSXBase.HTMLAttributes<HTMLCatInputElement>;
            "cat-modal": LocalJSX.CatModal & JSXBase.HTMLAttributes<HTMLCatModalElement>;
            "cat-pagination": LocalJSX.CatPagination & JSXBase.HTMLAttributes<HTMLCatPaginationElement>;
            "cat-radio": LocalJSX.CatRadio & JSXBase.HTMLAttributes<HTMLCatRadioElement>;
            "cat-radio-group": LocalJSX.CatRadioGroup & JSXBase.HTMLAttributes<HTMLCatRadioGroupElement>;
            "cat-scrollable": LocalJSX.CatScrollable & JSXBase.HTMLAttributes<HTMLCatScrollableElement>;
            "cat-select": LocalJSX.CatSelect & JSXBase.HTMLAttributes<HTMLCatSelectElement>;
            "cat-select-demo": LocalJSX.CatSelectDemo & JSXBase.HTMLAttributes<HTMLCatSelectDemoElement>;
            "cat-skeleton": LocalJSX.CatSkeleton & JSXBase.HTMLAttributes<HTMLCatSkeletonElement>;
            "cat-spinner": LocalJSX.CatSpinner & JSXBase.HTMLAttributes<HTMLCatSpinnerElement>;
            "cat-tab": LocalJSX.CatTab & JSXBase.HTMLAttributes<HTMLCatTabElement>;
            "cat-tabs": LocalJSX.CatTabs & JSXBase.HTMLAttributes<HTMLCatTabsElement>;
            "cat-textarea": LocalJSX.CatTextarea & JSXBase.HTMLAttributes<HTMLCatTextareaElement>;
            "cat-toast-demo": LocalJSX.CatToastDemo & JSXBase.HTMLAttributes<HTMLCatToastDemoElement>;
            "cat-toggle": LocalJSX.CatToggle & JSXBase.HTMLAttributes<HTMLCatToggleElement>;
            "cat-tooltip": LocalJSX.CatTooltip & JSXBase.HTMLAttributes<HTMLCatTooltipElement>;
        }
    }
}
