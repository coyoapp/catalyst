{"version":3,"sources":["src/components/cat-i18n/cat-i18n-registry.ts","src/components/cat-icon/cat-icon-registry.ts"],"names":["CatI18nRegistry","[object Object]","this","lang","messages","Map","instance","key","message","_a","get","log","error","getDict","set","info","window","dispatchEvent","buildEvent","i18n","dict","Object","entries","forEach","keys","concat","delete","name","detail","CustomEvent","bubbles","composed","CatIconRegistry","icons","setName","icon","buildName","data","names"],"mappings":"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","sourcesContent":["import log from 'loglevel';\n\nexport class CatI18nRegistry {\n  private static instance: CatI18nRegistry;\n\n  private lang = 'en';\n  private readonly messages: Map<string, Map<string, string>> = new Map();\n\n  private constructor() {\n    // hide constructor\n  }\n\n  static getInstance(): CatI18nRegistry {\n    if (!CatI18nRegistry.instance) {\n      CatI18nRegistry.instance = new CatI18nRegistry();\n    }\n    return CatI18nRegistry.instance;\n  }\n\n  getLanguage(): string {\n    return this.lang;\n  }\n\n  setLanguage(lang: string): void {\n    this.lang = lang;\n  }\n\n  getMessage(key: string): string | undefined {\n    const message = this.messages.get(this.lang)?.get(key);\n    if (!message) {\n      log.error(`[CatI18nRegistry] Unknown message for lang ${this.lang}: ${key}`);\n    }\n    return message;\n  }\n\n  addMessage(lang: string, key: string, message: string): CatI18nRegistry {\n    this.getDict(lang).set(key, message);\n    log.info(`[CatI18nRegistry] Added message for lang ${lang}: ${key}`);\n    window.dispatchEvent(this.buildEvent('cat-i18n-added', { lang, key }));\n    return this;\n  }\n\n  addMessages(lang: string, i18n: { [key: string]: string }): CatI18nRegistry {\n    const dict = this.getDict(lang);\n    Object.entries(i18n).forEach(([key, message]) => dict.set(key, message));\n    log.info(`[CatI18nRegistry] Added message for lang ${lang}: ${Object.keys(i18n).concat(', ')}`);\n    window.dispatchEvent(this.buildEvent('cat-i18n-added', { lang, keys: Object.keys(i18n) }));\n    return this;\n  }\n\n  removeMessage(lang: string, key: string): CatI18nRegistry {\n    this.getDict(lang).delete(key);\n    log.info(`[CatI18nRegistry] Removed message for lang ${lang}: ${key}`);\n    window.dispatchEvent(this.buildEvent('cat-i18n-removed', { lang, key }));\n    return this;\n  }\n\n  removeMessages(lang: string, keys: string[]): CatI18nRegistry {\n    const dict = this.getDict(lang);\n    keys.forEach(key => dict.delete(key));\n    log.info(`[CatI18nRegistry] Removed messages for lang ${lang}: ${keys.concat(', ')}`);\n    window.dispatchEvent(this.buildEvent('cat-i18n-added', { lang, keys }));\n    return this;\n  }\n\n  private buildEvent<T>(name: string, detail?: T) {\n    return new CustomEvent(name, {\n      bubbles: true,\n      composed: true,\n      detail\n    });\n  }\n\n  private getDict(lang: string) {\n    let messages = this.messages.get(lang);\n    if (!messages) {\n      messages = new Map();\n      this.messages.set(lang, messages);\n    }\n    return messages;\n  }\n}\n","import log from 'loglevel';\n\nexport class CatIconRegistry {\n  private static instance: CatIconRegistry;\n\n  private readonly icons: Map<string, string> = new Map();\n\n  private constructor() {\n    // hide constructor\n  }\n\n  static getInstance(): CatIconRegistry {\n    if (!CatIconRegistry.instance) {\n      CatIconRegistry.instance = new CatIconRegistry();\n    }\n    return CatIconRegistry.instance;\n  }\n\n  getIcon(name: string, setName?: string): string | undefined {\n    const icon = this.icons.get(this.buildName(name, setName));\n    if (!icon) {\n      log.error(`[CatIconRegistry] Unknown icon${setName ? ` in set ${setName}` : ''}: ${name}`);\n    }\n    return icon;\n  }\n\n  addIcon(name: string, data: string, setName?: string): CatIconRegistry {\n    this.icons.set(this.buildName(name, setName), data);\n    log.info(`[CatIconRegistry] Added icon${setName ? ` to set ${setName}` : ''}: ${name}`);\n    window.dispatchEvent(this.buildEvent('cat-icon-added', { name, setName }));\n    return this;\n  }\n\n  addIcons(icons: { [name: string]: string }, setName?: string): CatIconRegistry {\n    Object.entries(icons).forEach(([name, data]) => this.icons.set(this.buildName(name, setName), data));\n    log.info(`[CatIconRegistry] Added icons${setName ? ` to set ${setName}` : ''}: ${Object.keys(icons).concat(', ')}`);\n    window.dispatchEvent(this.buildEvent('cat-icons-added', { names: Object.keys(icons), setName }));\n    return this;\n  }\n\n  removeIcon(name: string, setName?: string): CatIconRegistry {\n    this.icons.delete(this.buildName(name, setName));\n    log.info(`[CatIconRegistry] Removed icon${setName ? ` from set ${setName}` : ''}: ${name}`);\n    window.dispatchEvent(this.buildEvent('cat-icon-removed', { name, setName }));\n    return this;\n  }\n\n  removeIcons(names: string[], setName?: string): CatIconRegistry {\n    names.forEach(name => this.icons.delete(this.buildName(name, setName)));\n    log.info(`[CatIconRegistry] Removed icons${setName ? ` from set ${setName}` : ''}: ${names.concat(', ')}`);\n    window.dispatchEvent(this.buildEvent('cat-icons-removed', { names, setName }));\n    return this;\n  }\n\n  private buildName(name: string, setName?: string) {\n    return setName ? `${setName}:name` : name;\n  }\n\n  private buildEvent<T>(name: string, detail?: T) {\n    return new CustomEvent(name, {\n      bubbles: true,\n      composed: true,\n      detail\n    });\n  }\n}\n"]}