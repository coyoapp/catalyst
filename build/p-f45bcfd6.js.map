{"version":3,"sources":["src/components/cat-i18n/cat-i18n-registry.ts","src/components/cat-icon/cat-icon-registry.ts"],"names":["CatI18nRegistry","[object Object]","this","_locale","_dicts","Map","instance","locale","log","info","window","dispatchEvent","buildEvent","i18n","dict","getDict","Object","entries","forEach","key","message","set","clear","params","_a","get","error","replace","_match","name","detail","CustomEvent","bubbles","composed","lang","CatIconRegistry","icons","setName","icon","buildName","data","keys","concat","names","delete"],"mappings":"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","sourcesContent":["import log from 'loglevel';\n\nexport class CatI18nRegistry {\n  private static instance: CatI18nRegistry;\n\n  private _locale = 'en';\n  private readonly _dicts: Map<string, Map<string, string>> = new Map();\n\n  private constructor() {\n    // hide constructor\n  }\n\n  static getInstance(): CatI18nRegistry {\n    if (!CatI18nRegistry.instance) {\n      CatI18nRegistry.instance = new CatI18nRegistry();\n    }\n    return CatI18nRegistry.instance;\n  }\n\n  locale(locale?: string): string {\n    if (locale) {\n      this._locale = locale;\n      log.info(`[CatI18nRegistry] Locale set to ${locale}`);\n      window.dispatchEvent(this.buildEvent('cat-i18n-locale', { locale }));\n    }\n    return this._locale;\n  }\n\n  register(locale: string, i18n: { [key: string]: string }): void {\n    const dict = this.getDict(locale);\n    Object.entries(i18n).forEach(([key, message]) => dict.set(key, message));\n    log.info(`[CatI18nRegistry] Registered messages for ${locale}`, i18n);\n    window.dispatchEvent(this.buildEvent('cat-i18n-register', { i18n }));\n  }\n\n  clear(locale?: string): void {\n    if (locale) {\n      this.getDict(locale).clear();\n      log.info(`[CatI18nRegistry] Cleared messages for ${locale}`);\n      window.dispatchEvent(this.buildEvent('cat-i18n-clear', { locale }));\n    } else {\n      this._dicts.clear();\n      log.info(`[CatI18nRegistry] Cleared messages`);\n      window.dispatchEvent(this.buildEvent('cat-i18n-clear'));\n    }\n  }\n\n  t(key: string, params?: { [key: string]: string | number }): string {\n    const message = this._dicts.get(this._locale)?.get(key);\n    if (!message) {\n      log.error(`[CatI18nRegistry] Unknown message for ${this._locale}: ${key}`);\n    }\n    return message?.replace(/{{\\s*([-a-zA-Z._]+)\\s*}}/g, (_match, key) => `${params?.[key] ?? ''}`) || '';\n  }\n\n  private buildEvent<T>(name: string, detail?: T) {\n    return new CustomEvent(name, {\n      bubbles: true,\n      composed: true,\n      detail\n    });\n  }\n\n  private getDict(lang: string) {\n    let dict = this._dicts.get(lang);\n    if (!dict) {\n      dict = new Map();\n      this._dicts.set(lang, dict);\n    }\n    return dict;\n  }\n}\n","import log from 'loglevel';\n\nexport class CatIconRegistry {\n  private static instance: CatIconRegistry;\n\n  private readonly icons: Map<string, string> = new Map();\n\n  private constructor() {\n    // hide constructor\n  }\n\n  static getInstance(): CatIconRegistry {\n    if (!CatIconRegistry.instance) {\n      CatIconRegistry.instance = new CatIconRegistry();\n    }\n    return CatIconRegistry.instance;\n  }\n\n  getIcon(name: string, setName?: string): string | undefined {\n    const icon = this.icons.get(this.buildName(name, setName));\n    if (!icon) {\n      log.error(`[CatIconRegistry] Unknown icon${setName ? ` in set ${setName}` : ''}: ${name}`);\n    }\n    return icon;\n  }\n\n  addIcon(name: string, data: string, setName?: string): CatIconRegistry {\n    this.icons.set(this.buildName(name, setName), data);\n    log.info(`[CatIconRegistry] Added icon${setName ? ` to set ${setName}` : ''}: ${name}`);\n    window.dispatchEvent(this.buildEvent('cat-icon-added', { name, setName }));\n    return this;\n  }\n\n  addIcons(icons: { [name: string]: string }, setName?: string): CatIconRegistry {\n    Object.entries(icons).forEach(([name, data]) => this.icons.set(this.buildName(name, setName), data));\n    log.info(`[CatIconRegistry] Added icons${setName ? ` to set ${setName}` : ''}: ${Object.keys(icons).concat(', ')}`);\n    window.dispatchEvent(this.buildEvent('cat-icons-added', { names: Object.keys(icons), setName }));\n    return this;\n  }\n\n  removeIcon(name: string, setName?: string): CatIconRegistry {\n    this.icons.delete(this.buildName(name, setName));\n    log.info(`[CatIconRegistry] Removed icon${setName ? ` from set ${setName}` : ''}: ${name}`);\n    window.dispatchEvent(this.buildEvent('cat-icon-removed', { name, setName }));\n    return this;\n  }\n\n  removeIcons(names: string[], setName?: string): CatIconRegistry {\n    names.forEach(name => this.icons.delete(this.buildName(name, setName)));\n    log.info(`[CatIconRegistry] Removed icons${setName ? ` from set ${setName}` : ''}: ${names.concat(', ')}`);\n    window.dispatchEvent(this.buildEvent('cat-icons-removed', { names, setName }));\n    return this;\n  }\n\n  private buildName(name: string, setName?: string) {\n    return setName ? `${setName}:name` : name;\n  }\n\n  private buildEvent<T>(name: string, detail?: T) {\n    return new CustomEvent(name, {\n      bubbles: true,\n      composed: true,\n      detail\n    });\n  }\n}\n"]}