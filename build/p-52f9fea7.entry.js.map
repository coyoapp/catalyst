{"version":3,"sources":["src/components/cat-modal/cat-modal.scss?tag=cat-modal&encapsulation=shadow","src/components/cat-modal/cat-modal.tsx"],"names":["catModalCss","CatModal","[object Object]","hostRef","this","isVisible","size","modal","trap","focusTrap.createFocusTrap","tabbableOptions","getShadowRoot","initialFocus","firstTabbable","closeButton","allowOutsideClick","clickOutsideDeactivates","event","composedPath","includes","onDeactivate","setReturnFocus","previousActiveElement","HTMLElement","_a","activate","updateAccessibility","hostElement","h","aria-modal","role","aria-hidden","class","ref","el","Boolean","icon","iconOnly","a11yLabel","onCatClick","onClick","bind","deactivate","element","parentElement","Array","from","children","forEach","elementSibling","setAttribute","removeAttribute","document","body"],"mappings":"6FAAA,MAAMA,EAAc,otBCSPC,EAAQ,MALrBC,YAAAC,aAYWC,KAAAC,UAAY,MAKbD,KAAAE,KAAwB,IAEhCJ,mBACE,GAAIE,KAAKG,MAAO,CACdH,KAAKI,KAAOC,EAA0BL,KAAKG,MAAO,CAChDG,gBAAiB,CACfC,cAAe,MAEjBC,aAAcC,EAAcT,KAAKU,aACjCC,kBAAmB,KACnBC,wBAAyBC,IAAUb,KAAKG,QAAUU,EAAMC,eAAeC,SAASf,KAAKG,OACrFa,aAAc,IAAOhB,KAAKC,UAAY,MACtCgB,eAAgBC,GACdA,aAAiCC,YAC5BV,EAAcS,GACfA,KAKZpB,2BACE,GAAIE,KAAKC,WAAWmB,EAAApB,KAAKI,QAAI,MAAAgB,SAAA,OAAA,EAAAA,EAAEC,WAC/BrB,KAAKsB,oBAAoBtB,KAAKuB,aAOhCzB,aACEE,KAAKC,UAAY,KAGnBH,SACE,OACE0B,EAAA,MAAA,CAAAC,aAAA,KAAgBC,KAAK,SAAQC,eAAe3B,KAAKC,UAAY,OAAS,QAAS2B,MAAM,iBACnFJ,EAAA,MAAA,CAAKK,IAAKC,GAAO9B,KAAKG,MAAQ2B,EAAKF,MAAO,CAAEzB,MAAO,KAAML,CAAC,SAASE,KAAKE,QAAS6B,QAAQ/B,KAAKE,QAC5FsB,EAAA,MAAA,CAAKI,MAAM,gBACTJ,EAAA,aAAA,CACEK,IAAKC,GAAO9B,KAAKU,YAAcoB,EAC/BE,KAAK,iBACLJ,MAAM,eACN1B,KAAK,IACL+B,SAAQ,KACRC,UAAU,QACVC,WAAYnC,KAAKoC,QAAQC,KAAKrC,SAGlCwB,EAAA,MAAA,CAAKI,MAAM,iBACTJ,EAAA,OAAA,SAOF1B,iBACNsB,EAAApB,KAAKI,QAAI,MAAAgB,SAAA,OAAA,EAAAA,EAAEkB,aAGLxC,oBAAoByC,GAC1B,GAAIA,EAAQC,cAAe,CACzBC,MAAMC,KAAKH,EAAQC,cAAcG,UAAUC,SAAQC,IACjD,GAAIA,IAAmBN,EAAS,CAC9BvC,KAAKC,UACD4C,EAAeC,aAAa,cAAe,QAC3CD,EAAeE,gBAAgB,mBAIvC,GAAIR,EAAQC,gBAAkBQ,SAASC,KAAM,CAC3CjD,KAAKsB,oBAAoBiB,EAAQC","sourcesContent":["@use 'variables' as *;\n@use 'mixins' as *;\n\n:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n.modal-wrapper {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: rgb(cat-token('color.ui.background.backdrop'), cat-token('opacity.backdrop'));\n  z-index: 2;\n  display: flex;\n\n  &[aria-hidden='true'] {\n    display: none;\n  }\n}\n\n.modal {\n  margin: auto;\n  z-index: 2;\n  position: relative;\n  background-color: cat-token('color.ui.background.body');\n  border-radius: cat-border-radius('l');\n  max-width: 100%;\n  padding: 32px;\n}\n\n.modal-header {\n  display: flex;\n  justify-content: end;\n  align-self: stretch;\n\n  .close-button::part(button) {\n    box-shadow: unset;\n  }\n}\n\n.modal-content {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  align-self: stretch;\n  margin: 16px 0;\n}\n\n@mixin size($size) {\n  .modal-#{$size} {\n    width: cat-token('size.modal.#{$size}');\n  }\n}\n\n@include size('s');\n@include size('m');\n@include size('l');\n","import { Component, Element, h, Method, Prop, State } from '@stencil/core';\nimport * as focusTrap from 'focus-trap';\nimport firstTabbable from '../../utils/first-tabbable';\n\n@Component({\n  tag: 'cat-modal',\n  styleUrl: 'cat-modal.scss',\n  shadow: true\n})\nexport class CatModal {\n  private trap?: focusTrap.FocusTrap;\n  private modal?: HTMLElement;\n  private closeButton?: HTMLElement;\n\n  @Element() hostElement!: HTMLElement;\n\n  @State() isVisible = false;\n\n  /**\n   * The size of the modal.\n   */\n  @Prop() size: 's' | 'm' | 'l' = 'm';\n\n  componentDidLoad(): void {\n    if (this.modal) {\n      this.trap = focusTrap.createFocusTrap(this.modal, {\n        tabbableOptions: {\n          getShadowRoot: true\n        },\n        initialFocus: firstTabbable(this.closeButton),\n        allowOutsideClick: true,\n        clickOutsideDeactivates: event => !this.modal || !event.composedPath().includes(this.modal),\n        onDeactivate: () => (this.isVisible = false),\n        setReturnFocus: previousActiveElement =>\n          previousActiveElement instanceof HTMLElement\n            ? (firstTabbable(previousActiveElement) as HTMLElement)\n            : previousActiveElement\n      });\n    }\n  }\n\n  componentDidUpdate(): void {\n    if (this.isVisible) this.trap?.activate();\n    this.updateAccessibility(this.hostElement);\n  }\n\n  /**\n   * Shows the modal.\n   */\n  @Method()\n  async show(): Promise<void> {\n    this.isVisible = true;\n  }\n\n  render() {\n    return (\n      <div aria-modal role=\"dialog\" aria-hidden={!this.isVisible ? 'true' : 'false'} class=\"modal-wrapper\">\n        <div ref={el => (this.modal = el)} class={{ modal: true, [`modal-${this.size}`]: Boolean(this.size) }}>\n          <div class=\"modal-header\">\n            <cat-button\n              ref={el => (this.closeButton = el)}\n              icon=\"cross-outlined\"\n              class=\"close-button\"\n              size=\"s\"\n              iconOnly\n              a11yLabel=\"close\"\n              onCatClick={this.onClick.bind(this)}\n            ></cat-button>\n          </div>\n          <div class=\"modal-content\">\n            <slot></slot>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private onClick() {\n    this.trap?.deactivate();\n  }\n\n  private updateAccessibility(element: HTMLElement) {\n    if (element.parentElement) {\n      Array.from(element.parentElement.children).forEach(elementSibling => {\n        if (elementSibling !== element) {\n          this.isVisible\n            ? elementSibling.setAttribute('aria-hidden', 'true')\n            : elementSibling.removeAttribute('aria-hidden');\n        }\n      });\n\n      if (element.parentElement !== document.body) {\n        this.updateAccessibility(element.parentElement);\n      }\n    }\n  }\n}\n"]}