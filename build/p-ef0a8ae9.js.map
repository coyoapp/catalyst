{"version":3,"sources":["src/components/cat-icon/cat-icon-registry.ts"],"names":["CatIconRegistry","[object Object]","this","icons","Map","instance","name","setName","get","buildName","data","set","window","dispatchEvent","buildEvent","Object","entries","forEach","names","keys","delete","detail","CustomEvent","bubbles","composed"],"mappings":"MAAaA,EAKXC,cAFiBC,KAAAC,MAA6B,IAAIC,IAMlDH,qBACE,IAAKD,EAAgBK,SAAU,CAC7BL,EAAgBK,SAAW,IAAIL,EAEjC,OAAOA,EAAgBK,SAGzBJ,QAAQK,EAAcC,GACpB,OAAOL,KAAKC,MAAMK,IAAIN,KAAKO,UAAUH,EAAMC,IAG7CN,QAAQK,EAAcI,EAAcH,GAClCL,KAAKC,MAAMQ,IAAIT,KAAKO,UAAUH,EAAMC,GAAUG,GAC9CE,OAAOC,cAAcX,KAAKY,WAAW,iBAAkB,CAAER,KAAAA,EAAMC,QAAAA,KAGjEN,SAASE,EAAmCI,GAC1CQ,OAAOC,QAAQb,GAAOc,SAAQ,EAAEX,EAAMI,KAAUR,KAAKC,MAAMQ,IAAIT,KAAKO,UAAUH,EAAMC,GAAUG,KAC9FE,OAAOC,cAAcX,KAAKY,WAAW,kBAAmB,CAAEI,MAAOH,OAAOI,KAAKhB,GAAQI,QAAAA,KAGvFN,WAAWK,EAAcC,GACvBL,KAAKC,MAAMiB,OAAOlB,KAAKO,UAAUH,EAAMC,IACvCK,OAAOC,cAAcX,KAAKY,WAAW,mBAAoB,CAAER,KAAAA,EAAMC,QAAAA,KAGnEN,YAAYiB,EAAiBX,GAC3BW,EAAMD,SAAQX,GAAQJ,KAAKC,MAAMiB,OAAOlB,KAAKO,UAAUH,EAAMC,MAC7DK,OAAOC,cAAcX,KAAKY,WAAW,oBAAqB,CAAEI,MAAAA,EAAOX,QAAAA,KAG7DN,UAAUK,EAAcC,GAC9B,OAAOA,EAAU,GAAGA,SAAiBD,EAG/BL,WAAcK,EAAce,GAClC,OAAO,IAAIC,YAAYhB,EAAM,CAC3BiB,QAAS,KACTC,SAAU,KACVH,OAAAA","sourcesContent":["export class CatIconRegistry {\n  private static instance: CatIconRegistry;\n\n  private readonly icons: Map<string, string> = new Map();\n\n  private constructor() {\n    // hide constructor\n  }\n\n  static getInstance(): CatIconRegistry {\n    if (!CatIconRegistry.instance) {\n      CatIconRegistry.instance = new CatIconRegistry();\n    }\n    return CatIconRegistry.instance;\n  }\n\n  getIcon(name: string, setName?: string): string | undefined {\n    return this.icons.get(this.buildName(name, setName));\n  }\n\n  addIcon(name: string, data: string, setName?: string): void {\n    this.icons.set(this.buildName(name, setName), data);\n    window.dispatchEvent(this.buildEvent('cat-icon-added', { name, setName }));\n  }\n\n  addIcons(icons: { [name: string]: string }, setName?: string): void {\n    Object.entries(icons).forEach(([name, data]) => this.icons.set(this.buildName(name, setName), data));\n    window.dispatchEvent(this.buildEvent('cat-icons-added', { names: Object.keys(icons), setName }));\n  }\n\n  removeIcon(name: string, setName?: string): void {\n    this.icons.delete(this.buildName(name, setName));\n    window.dispatchEvent(this.buildEvent('cat-icon-removed', { name, setName }));\n  }\n\n  removeIcons(names: string[], setName?: string): void {\n    names.forEach(name => this.icons.delete(this.buildName(name, setName)));\n    window.dispatchEvent(this.buildEvent('cat-icons-removed', { names, setName }));\n  }\n\n  private buildName(name: string, setName?: string) {\n    return setName ? `${setName}:name` : name;\n  }\n\n  private buildEvent<T>(name: string, detail?: T) {\n    return new CustomEvent(name, {\n      bubbles: true,\n      composed: true,\n      detail\n    });\n  }\n}\n"]}